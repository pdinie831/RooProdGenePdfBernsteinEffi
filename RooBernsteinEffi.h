/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOBERNSTEINEFFI
#define ROOBERNSTEINEFFI

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooListProxy.h"
#include "RooAbsPdf.h"
#include "RooAbsCategory.h"
#include "TMath.h"

typedef double fptype; 
 
class RooBernsteinEffi : public RooAbsReal {
public:
  RooBernsteinEffi() {} ; 
  RooBernsteinEffi(const char *name, const char *title,
	      RooAbsReal& x,
	      RooAbsReal& y,
	      RooAbsReal& z,
	      const RooArgList& coefList,
	      int maxDegree1, 
	      int maxDegree2, 
	      int maxDegree3
	      );
  RooBernsteinEffi(const RooBernsteinEffi& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new RooBernsteinEffi(*this,newname); }
  inline virtual ~RooBernsteinEffi() { }
  Double_t evaluateInt(fptype xBinw,fptype yBinw,fptype zBinw) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const;
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const;
protected:

  RooRealProxy _x ;
  RooRealProxy _y ;
  RooRealProxy _z ;
  RooListProxy _coefList ;
  Int_t _maxDegree1 ;
  Int_t _maxDegree2 ;
  Int_t _maxDegree3 ;
  Int_t _maxDegreeV ;
  
  
  Double_t evaluate() const ;

private:
  fptype device_bernsteinkn_func(fptype x, fptype enne, fptype kappa) const;
  fptype device_coeffbinomial(fptype enne, fptype kappa) const;
  fptype device_EffiBernsteinkn_intgBin( fptype xLeft, fptype xRight, fptype enne, fptype kappa) const;
  ClassDef(RooBernsteinEffi,1) // Your description goes here...
};
 
#endif
